apiVersion: v1
kind: Namespace
metadata:
  name: starting-again
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-msal-config
  namespace: starting-again
data:
  MSAL_TENANT_URL: https://login.microsoftonline.com/consumers
  MSAL_CLIENT_ID: ef0f1a58-5d27-48f4-a47d-043df4ea4c3f
  MSAL_CLIENT_SECRET: HqN8Q~uAE.yQED1eb-2k_bnVXjCNwqojugqfFaSp
---
apiVersion: networking.gke.io/v1beta1
kind: FrontendConfig
metadata:
  name: ingress-frontendconfig
  namespace: starting-again
spec:
  redirectToHttps:
    enabled: true
    responseCodeName: FOUND
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: qpp-ingress
  namespace: starting-again
  annotations:
    kubernetes.io/ingress.global-static-ip-name: starting-again-cluster-ip
    networking.gke.io/managed-certificates: managed-cert
    kubernetes.io/ingress.class: gce
    networking.gke.io/v1beta1.FrontendConfig: ingress-frontendconfig
    #ingress.kubernetes.io/custom-request-headers: 'access-control-allow-origin: *'
    #nginx.ingress.kubernetes.io/rewrite-target: /$1
    #kubernetes.io/enable-cors: 'true'
    #kubernetes.io/cors-allow-origin: '*'
    #kubernetes.io/force-ssl-redirect: 'true'
    #kubernetes.io/ingress.allow-http: 'false'
spec:
  rules:
    - host: api.txtack.net
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: noop
                port:
                  number: 3000
          - path: /api-1
            pathType: Prefix
            backend:
              service:
                name: api-1
                port:
                  number: 3000
          - path: /api-2
            pathType: Prefix
            backend:
              service:
                name: api-2
                port:
                  number: 3000
    - host: web-1.txtack.net
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: web-1
                port:
                  number: 80
    - host: web-2.txtack.net
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: web-2
                port:
                  number: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-1
  namespace: starting-again
  labels:
    app: api-1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-1
  template:
    metadata:
      labels:
        app: api-1
    spec:
      containers:
        - name: api-1
          image: gcr.io/starting-again-377302/api-1:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
          envFrom:
            - configMapRef:
                name: api-msal-config
---
kind: Service
apiVersion: v1
metadata:
  name: api-1
  namespace: starting-again
spec:
  selector:
    app: api-1
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-2
  namespace: starting-again
  labels:
    app: api-2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-2
  template:
    metadata:
      labels:
        app: api-2
    spec:
      containers:
        - name: api-2
          image: gcr.io/starting-again-377302/api-2:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
          envFrom:
            - configMapRef:
                name: api-msal-config
---
kind: Service
apiVersion: v1
metadata:
  name: api-2
  namespace: starting-again
spec:
  selector:
    app: api-2
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-1
  namespace: starting-again
  labels:
    app: web-1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web-1
  template:
    metadata:
      labels:
        app: web-1
    spec:
      containers:
        - name: web-1
          image: gcr.io/starting-again-377302/web-1:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 80
---
kind: Service
apiVersion: v1
metadata:
  name: web-1
  namespace: starting-again
spec:
  selector:
    app: web-1
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-2
  namespace: starting-again
  labels:
    app: web-2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web-2
  template:
    metadata:
      labels:
        app: web-2
    spec:
      containers:
        - name: web-2
          image: gcr.io/starting-again-377302/web-2:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 80
---
kind: Service
apiVersion: v1
metadata:
  name: web-2
  namespace: starting-again
spec:
  selector:
    app: web-2
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: noop
  namespace: starting-again
  labels:
    app: noop
spec:
  replicas: 1
  selector:
    matchLabels:
      app: noop
  template:
    metadata:
      labels:
        app: noop
    spec:
      containers:
        - name: noop
          image: gcr.io/starting-again-377302/noop:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
---
kind: Service
apiVersion: v1
metadata:
  name: noop
  namespace: starting-again
spec:
  selector:
    app: noop
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
